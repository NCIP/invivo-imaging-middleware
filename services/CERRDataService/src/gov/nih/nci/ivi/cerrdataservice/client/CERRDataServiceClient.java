package gov.nih.nci.ivi.cerrdataservice.client;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.rmi.RemoteException;
import java.util.Vector;
import java.util.zip.ZipInputStream;

import javax.xml.namespace.QName;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.cagrid.transfer.context.client.TransferServiceContextClient;
import org.cagrid.transfer.context.client.helper.TransferClientHelper;

import org.oasis.wsrf.properties.GetResourcePropertyResponse;

import org.globus.gsi.GlobusCredential;
import org.globus.wsrf.encoding.ObjectSerializer;
import org.globus.wsrf.encoding.SerializationException;

import edu.osu.bmi.ivi.cerr.CERRObject;
import edu.osu.bmi.utils.io.zip.ZipEntryInputStream;

import gov.nih.nci.ivi.cerrdataservice.stubs.CERRDataServicePortType;
import gov.nih.nci.ivi.cerrdataservice.stubs.service.CERRDataServiceAddressingLocator;
import gov.nih.nci.ivi.cerrdataservice.common.CERRDataServiceI;
import gov.nih.nci.cagrid.cqlquery.CQLQuery;
import gov.nih.nci.cagrid.cqlresultset.CQLQueryResults;
import gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class CERRDataServiceClient extends CERRDataServiceClientBase implements CERRDataServiceI {	

	public CERRDataServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public CERRDataServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public CERRDataServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public CERRDataServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(CERRDataServiceClient.class.getName() + " -url <service url>");
	}
	

	private static CQLQuery CERR2CQL(CERRObject cerrQuery)
	{
		CQLQuery query = new CQLQuery();
		gov.nih.nci.cagrid.cqlquery.Object      target = new gov.nih.nci.cagrid.cqlquery.Object();
		target.setName("edu.osu.bmi.ivi.cerr.CERRObject");

		Vector<gov.nih.nci.cagrid.cqlquery.Attribute> attrVec= new Vector<gov.nih.nci.cagrid.cqlquery.Attribute> ();
/*
		if(cerrQuery.getArchive().length() != 0) {
			gov.nih.nci.cagrid.cqlquery.Attribute attr = new gov.nih.nci.cagrid.cqlquery.Attribute();
			attr.setName("edu.osu.bmi.ivi.cerr.CERRObject.archive");
			attr.setPredicate(gov.nih.nci.cagrid.cqlquery.Predicate.fromString("EQUAL_TO"));
			attr.setValue(cerrQuery.getArchive());
			attrVec.add(attr);
		}
		else
			System.out.println("Attrib is null");

		if(cerrQuery.getTapeStandardNumber().length() != 0) {
			gov.nih.nci.cagrid.cqlquery.Attribute attr = new gov.nih.nci.cagrid.cqlquery.Attribute();
			attr.setName("edu.osu.bmi.ivi.cerr.CERRObject.tapeStandardNumber");
			attr.setPredicate(gov.nih.nci.cagrid.cqlquery.Predicate.fromString("EQUAL_TO"));
			attr.setValue(cerrQuery.getTapeStandardNumber());
			attrVec.add(attr);
		}
		else
			System.out.println("Attrib is null");

		if(cerrQuery.getIntercomparisonStandard().length() != 0) {
			gov.nih.nci.cagrid.cqlquery.Attribute attr = new gov.nih.nci.cagrid.cqlquery.Attribute();
			attr.setName("edu.osu.bmi.ivi.cerr.CERRObject.intercomparisonStandard");
			attr.setPredicate(gov.nih.nci.cagrid.cqlquery.Predicate.fromString("EQUAL_TO"));
			attr.setValue(cerrQuery.getIntercomparisonStandard());
			attrVec.add(attr);
		}
		else
			System.out.println("Attrib is null");

		if(cerrQuery.getArchive().length() != 0) {
			gov.nih.nci.cagrid.cqlquery.Attribute attr = new gov.nih.nci.cagrid.cqlquery.Attribute();
			attr.setName("edu.osu.bmi.ivi.cerr.CERRObject.archive");
			attr.setPredicate(gov.nih.nci.cagrid.cqlquery.Predicate.fromString("EQUAL_TO"));
			attr.setValue(cerrQuery.getArchive());
			attrVec.add(attr);
		}
		else
			System.out.println("Attrib is null");

		if(cerrQuery.getInstitution().length() != 0) {
			gov.nih.nci.cagrid.cqlquery.Attribute attr = new gov.nih.nci.cagrid.cqlquery.Attribute();
			attr.setName("edu.osu.bmi.ivi.cerr.CERRObject.institution");
			attr.setPredicate(gov.nih.nci.cagrid.cqlquery.Predicate.fromString("EQUAL_TO"));
			attr.setValue(cerrQuery.getInstitution());
			attrVec.add(attr);
		}
		else
			System.out.println("Attrib is null");

		if(cerrQuery.getDateCreated() != null) {
			gov.nih.nci.cagrid.cqlquery.Attribute attr = new gov.nih.nci.cagrid.cqlquery.Attribute();
			attr.setName("edu.osu.bmi.ivi.cerr.CERRObject.dateCreated");
			attr.setPredicate(gov.nih.nci.cagrid.cqlquery.Predicate.fromString("EQUAL_TO"));
			attr.setValue(cerrQuery.getDateCreated().toString());
			attrVec.add(attr);
		}
		else
			System.out.println("Attrib is null");

		if(cerrQuery.getWriter().length() != 0) {
			gov.nih.nci.cagrid.cqlquery.Attribute attr = new gov.nih.nci.cagrid.cqlquery.Attribute();
			attr.setName("edu.osu.bmi.ivi.cerr.CERRObject.writer");
			attr.setPredicate(gov.nih.nci.cagrid.cqlquery.Predicate.fromString("EQUAL_TO"));
			attr.setValue(cerrQuery.getWriter());
			attrVec.add(attr);
		}
		else
			System.out.println("Attrib is null");

		if(cerrQuery.getSponsorID().length() != 0) {
			gov.nih.nci.cagrid.cqlquery.Attribute attr = new gov.nih.nci.cagrid.cqlquery.Attribute();
			attr.setName("edu.osu.bmi.ivi.cerr.CERRObject.sponsorID");
			attr.setPredicate(gov.nih.nci.cagrid.cqlquery.Predicate.fromString("EQUAL_TO"));
			attr.setValue(cerrQuery.getSponsorID());
			attrVec.add(attr);
		}
		else
			System.out.println("Attrib is null");

		if(cerrQuery.getProtocolID().length() != 0) {
			gov.nih.nci.cagrid.cqlquery.Attribute attr = new gov.nih.nci.cagrid.cqlquery.Attribute();
			attr.setName("edu.osu.bmi.ivi.cerr.CERRObject.protocolID");
			attr.setPredicate(gov.nih.nci.cagrid.cqlquery.Predicate.fromString("EQUAL_TO"));
			attr.setValue(cerrQuery.getProtocolID());
			attrVec.add(attr);
		}
		else
			System.out.println("Attrib is null");

		if(cerrQuery.getSubjectID().length() != 0) {
			gov.nih.nci.cagrid.cqlquery.Attribute attr = new gov.nih.nci.cagrid.cqlquery.Attribute();
			attr.setName("edu.osu.bmi.ivi.cerr.CERRObject.subjectID");
			attr.setPredicate(gov.nih.nci.cagrid.cqlquery.Predicate.fromString("EQUAL_TO"));
			attr.setValue(cerrQuery.getSubjectID());
			attrVec.add(attr);
		}
		else
			System.out.println("Attrib is null");

		if(cerrQuery.getSubmissionID().length() != 0) {
			gov.nih.nci.cagrid.cqlquery.Attribute attr = new gov.nih.nci.cagrid.cqlquery.Attribute();
			attr.setName("edu.osu.bmi.ivi.cerr.CERRObject.submissionID");
			attr.setPredicate(gov.nih.nci.cagrid.cqlquery.Predicate.fromString("EQUAL_TO"));
			attr.setValue(cerrQuery.getSubmissionID());
			attrVec.add(attr);
		}
		else
			System.out.println("Attrib is null");

		if(cerrQuery.getTimeSaved() != null) {
			gov.nih.nci.cagrid.cqlquery.Attribute attr = new gov.nih.nci.cagrid.cqlquery.Attribute();
			attr.setName("edu.osu.bmi.ivi.cerr.CERRObject.timeSaved");
			attr.setPredicate(gov.nih.nci.cagrid.cqlquery.Predicate.fromString("EQUAL_TO"));
			attr.setValue(cerrQuery.getTimeSaved().toString());
			attrVec.add(attr);
		}
		else
			System.out.println("Attrib is null");
*/
		if(attrVec.size() == 0)
		{
			query.setTarget(target);
			return query;
		}
		else if(attrVec.size() == 1)
		{
			target.setAttribute(attrVec.firstElement());
			query.setTarget(target);
			return query;
		}
		else
		{
			gov.nih.nci.cagrid.cqlquery.Group grp = new gov.nih.nci.cagrid.cqlquery.Group();
			grp.setLogicRelation(gov.nih.nci.cagrid.cqlquery.LogicalOperator.fromString("AND"));
			grp.setAttribute(attrVec.toArray(new gov.nih.nci.cagrid.cqlquery.Attribute[attrVec.size()]));
			target.setGroup(grp);
			query.setTarget(target);
			return query;
		}
	}

	public static CERRObject[] queryCERRDataService(CERRObject queryObject, String dataSourceURL)
	{
		Vector <CERRObject> queryResults = new Vector <CERRObject>();
		CQLQuery query = CERR2CQL(queryObject);
		try {
			CERRDataServiceClient client = new CERRDataServiceClient(dataSourceURL);
			CQLQueryResults results = client.query(query);

			CQLQueryResultsIterator iter = new CQLQueryResultsIterator(results);
			while (iter.hasNext()) {
				CERRObject result = (CERRObject)iter.next();
				queryResults.add(result);

				try {
					System.out.println(ObjectSerializer.toString(result, new QName(
							"gme://ncia.caBIG/1.0/gov.nih.nci.ncia.domain", result
									.getClass().getName())));
				} catch (SerializationException e) {
				}
			}
		} catch (MalformedURIException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return queryResults.toArray(new CERRObject[queryResults.size()]);
	}
/*
	public static String retrieveCERRDataService(CERRObject queryObject, String dataSourceURL, String localDestination)
	{
		final CQLQuery fcqlQuery = CERR2CQL(queryObject);
		InputStream istream = null;
		TransferServiceContextClient tclient = null;
		try {
			CERRDataServiceClient cerrDataService = new CERRDataServiceClient(dataSourceURL);
			tclient = new TransferServiceContextClient(cerrDataService
					.retrieveCERRObjects(fcqlQuery).getEndpointReference());
			istream = TransferClientHelper.getData(tclient
					.getDataTransferDescriptor());
		} catch (MalformedURIException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		ZipInputStream zis = new ZipInputStream(istream);
		ZipEntryInputStream zeis = null;
		BufferedInputStream bis = null;
		while (true) {
			try {
				zeis = new ZipEntryInputStream(zis);
			} catch (EOFException e) {
				break;
			} catch (IOException e) {
				System.err.println("IOException thrown when recieving the zip stream");
				e.printStackTrace();
			}

			File localLocation = new File(localDestination);
			if (!localLocation.exists())
				localLocation.mkdirs();

			String retrievedFile = localDestination + File.separator
					+ zeis.getName();
			bis = new BufferedInputStream(zeis);
			// do something with the content of the inputStream

			byte[] data = new byte[8192];
			int bytesRead = 0;
			try {
				BufferedOutputStream bos = new BufferedOutputStream(
						new FileOutputStream(retrievedFile));
				while ((bytesRead = (bis.read(data, 0, data.length))) > 0) {
					bos.write(data, 0, bytesRead);
					// System.out.println(new String(data));
					// System.out.println("caGrid transferred at " + new
					// Date().getTime());
				}
				bos.flush();
				bos.close();
			} catch (IOException e) {
				System.err.println("IOException thrown when reading the zip stream");
				e.printStackTrace();
			}
		}

		try {
			zis.close();
		} catch (IOException e) {
			System.err.println("IOException thrown when closing the zip stream");
			e.printStackTrace();
		}

		try {
			tclient.destroy();
		} catch (RemoteException e) {
			System.err.println("Remote exception thrown when closing the transer context");
			e.printStackTrace();
		}
		File localLocation = new File(localDestination);
		return localLocation.list()[0];

	}
	
*/	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  CERRDataServiceClient client = new CERRDataServiceClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference retrieveCERRObjects(gov.nih.nci.cagrid.cqlquery.CQLQuery cQLQuery) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"retrieveCERRObjects");
    gov.nih.nci.ivi.cerrdataservice.stubs.RetrieveCERRObjectsRequest params = new gov.nih.nci.ivi.cerrdataservice.stubs.RetrieveCERRObjectsRequest();
    gov.nih.nci.ivi.cerrdataservice.stubs.RetrieveCERRObjectsRequestCQLQuery cQLQueryContainer = new gov.nih.nci.ivi.cerrdataservice.stubs.RetrieveCERRObjectsRequestCQLQuery();
    cQLQueryContainer.setCQLQuery(cQLQuery);
    params.setCQLQuery(cQLQueryContainer);
    gov.nih.nci.ivi.cerrdataservice.stubs.RetrieveCERRObjectsResponse boxedResult = portType.retrieveCERRObjects(params);
    return boxedResult.getTransferServiceContextReference();
    }
  }

  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference submitCERRObject(edu.osu.bmi.ivi.cerr.CERRObject cERRObject) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"submitCERRObject");
    gov.nih.nci.ivi.cerrdataservice.stubs.SubmitCERRObjectRequest params = new gov.nih.nci.ivi.cerrdataservice.stubs.SubmitCERRObjectRequest();
    gov.nih.nci.ivi.cerrdataservice.stubs.SubmitCERRObjectRequestCERRObject cERRObjectContainer = new gov.nih.nci.ivi.cerrdataservice.stubs.SubmitCERRObjectRequestCERRObject();
    cERRObjectContainer.setCERRObject(cERRObject);
    params.setCERRObject(cERRObjectContainer);
    gov.nih.nci.ivi.cerrdataservice.stubs.SubmitCERRObjectResponse boxedResult = portType.submitCERRObject(params);
    return boxedResult.getTransferServiceContextReference();
    }
  }

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"query");
    gov.nih.nci.cagrid.data.QueryRequest params = new gov.nih.nci.cagrid.data.QueryRequest();
    gov.nih.nci.cagrid.data.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.QueryRequestCqlQuery();
    cqlQueryContainer.setCQLQuery(cqlQuery);
    params.setCqlQuery(cqlQueryContainer);
    gov.nih.nci.cagrid.data.QueryResponse boxedResult = portType.query(params);
    return boxedResult.getCQLQueryResultCollection();
    }
  }

  public gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer enumerationQuery(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"enumerationQuery");
    gov.nih.nci.cagrid.data.enumeration.EnumerationQueryRequest params = new gov.nih.nci.cagrid.data.enumeration.EnumerationQueryRequest();
    gov.nih.nci.cagrid.data.enumeration.EnumerationQueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.enumeration.EnumerationQueryRequestCqlQuery();
    cqlQueryContainer.setCQLQuery(cqlQuery);
    params.setCqlQuery(cqlQueryContainer);
    gov.nih.nci.cagrid.data.enumeration.EnumerationQueryResponse boxedResult = portType.enumerationQuery(params);
    return boxedResult.getEnumerationResponseContainer();
    }
  }

  public void submit(java.lang.String[] xmls) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"submit");
    gov.nih.nci.ivi.cerrdataservice.stubs.SubmitRequest params = new gov.nih.nci.ivi.cerrdataservice.stubs.SubmitRequest();
    params.setXmls(xmls);
    gov.nih.nci.ivi.cerrdataservice.stubs.SubmitResponse boxedResult = portType.submit(params);
    }
  }

  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference queryByTransfer(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryByTransfer");
    gov.nih.nci.ivi.cerrdataservice.stubs.QueryByTransferRequest params = new gov.nih.nci.ivi.cerrdataservice.stubs.QueryByTransferRequest();
    gov.nih.nci.ivi.cerrdataservice.stubs.QueryByTransferRequestCqlQuery cqlQueryContainer = new gov.nih.nci.ivi.cerrdataservice.stubs.QueryByTransferRequestCqlQuery();
    cqlQueryContainer.setCQLQuery(cqlQuery);
    params.setCqlQuery(cqlQueryContainer);
    gov.nih.nci.ivi.cerrdataservice.stubs.QueryByTransferResponse boxedResult = portType.queryByTransfer(params);
    return boxedResult.getTransferServiceContextReference();
    }
  }

  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference submitByTransfer() throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"submitByTransfer");
    gov.nih.nci.ivi.cerrdataservice.stubs.SubmitByTransferRequest params = new gov.nih.nci.ivi.cerrdataservice.stubs.SubmitByTransferRequest();
    gov.nih.nci.ivi.cerrdataservice.stubs.SubmitByTransferResponse boxedResult = portType.submitByTransfer(params);
    return boxedResult.getTransferServiceContextReference();
    }
  }

}
