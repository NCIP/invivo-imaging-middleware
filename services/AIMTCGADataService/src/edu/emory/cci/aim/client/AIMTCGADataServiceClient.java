package edu.emory.cci.aim.client;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FilenameFilter;
import java.io.IOException;
import java.rmi.RemoteException;

import org.apache.axis.client.Stub;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.globus.gsi.GlobusCredential;
import org.globus.wsrf.encoding.DeserializationException;
import org.globus.wsrf.encoding.ObjectDeserializer;
import org.xml.sax.InputSource;

import edu.emory.cci.aim.common.AIMTCGADataServiceI;
import edu.northwestern.radiology.aim.ImageAnnotation;
import gov.nih.nci.cagrid.cqlquery.CQLQuery;
import gov.nih.nci.cagrid.cqlquery.Object;
import gov.nih.nci.cagrid.cqlresultset.CQLQueryResults;
import gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType;
import gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType;
import gov.nih.nci.cagrid.data.utilities.CQLQueryResultsIterator;

/**
 * This class is autogenerated, DO NOT EDIT GENERATED GRID SERVICE ACCESS METHODS.
 *
 * This client is generated automatically by Introduce to provide a clean unwrapped API to the
 * service.
 *
 * On construction the class instance will contact the remote service and retrieve it's security
 * metadata description which it will use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.2
 */
public class AIMTCGADataServiceClient extends AIMTCGADataServiceClientBase implements AIMTCGADataServiceI {	

	public AIMTCGADataServiceClient(String url) throws MalformedURIException, RemoteException {
		this(url,null);	
	}

	public AIMTCGADataServiceClient(String url, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(url,proxy);
	}
	
	public AIMTCGADataServiceClient(EndpointReferenceType epr) throws MalformedURIException, RemoteException {
	   	this(epr,null);
	}
	
	public AIMTCGADataServiceClient(EndpointReferenceType epr, GlobusCredential proxy) throws MalformedURIException, RemoteException {
	   	super(epr,proxy);
	}

	public static void usage(){
		System.out.println(AIMTCGADataServiceClient.class.getName() + " -url <service url>");
	}
	
	private void submitBySoap(String filename, AIMTCGADataServiceClient client) throws IOException {
		//submit by SOAP			  

		File testfile = new File(filename);
		byte[] buf = new byte[(int) testfile.length()];
		BufferedInputStream fis = new BufferedInputStream(new FileInputStream(testfile));
		fis.read(buf, 0, (int)testfile.length());
		String xml = new String(buf);
		fis.close();
		
		client.submit(new String[] {xml});
	}
	private CQLQuery loadCQLQuery(String filename) {
		FileReader reader = null;
		try {
			reader = new FileReader(filename);
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		java.lang.Object o = null;
		try {
			o = ObjectDeserializer.deserialize(new InputSource(reader), CQLQuery.class);
		} catch (DeserializationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return (CQLQuery)o;
	}

	private void queryBySOAP(String filename, AIMTCGADataServiceClient client) throws MalformedQueryExceptionType, QueryProcessingExceptionType, RemoteException {
		//query
		CQLQuery cql = client.loadCQLQuery(filename);
//		CQLQuery cql = new CQLQuery();
//		Object target = new Object();
//		target.setName(ImageAnnotation.class.getCanonicalName());
//		cql.setTarget(target);
		
			  // standard query test - works fine
			  CQLQueryResults results = client.query(cql);
			  if (results == null) {
				  System.out.println("results is null");
				  return;
			  }
			  if (results.getObjectResult() ==null) {
				  System.out.println("results.getObjectResult() is null");
				  return;
			  }
			CQLQueryResultsIterator iter = new CQLQueryResultsIterator(results, true);
//			results.getObjectResult(0);
//			
//			QName qn = new QName("gme://caCORE.caCORE/3.2/edu.northwestern.radiology.AIM", "ImageAnnotation");
			String result = null;
			int count = 0;
			while (iter.hasNext()) {
					result = (String) iter.next();
					System.out.println(result);
					count++;
//								javax.xml.parsers.DocumentBuilderFactory fact = javax.xml.parsers.DocumentBuilderFactory.newInstance();
//								fact.setNamespaceAware(true);
//								Document doc = null;
//								try {
//									javax.xml.parsers.DocumentBuilder builder = fact.newDocumentBuilder();
//									doc = builder.parse(new InputSource(new StringReader(result)));
//								} catch (ParserConfigurationException e) {
//									// TODO Auto-generated catch block
//									e.printStackTrace();
//								} catch (SAXException e) {
//									// TODO Auto-generated catch block
//									e.printStackTrace();
//								} catch (IOException e) {
//									// TODO Auto-generated catch block
//									e.printStackTrace();
//								}
		//
//								if (doc != null) {
//									MessageElement content = new MessageElement(doc.getDocumentElement());
//									//System.out.println(xqlistnew.get(i));
//									//content.setValue(xqlistnew.get(i));
//									//contents[i].set_any(new MessageElement[] {content});
//									StringWriter writer = new StringWriter();
//									Utils.serializeObject(content,qn, writer);
//									System.out.println("serialized: " + writer.toString());
		//
//								}

			}

		  	System.out.println(System.nanoTime() + ",TCP,CLIENT,transfer requested"); System.out.flush();
		  	System.out.println("total count is " + count);
		}

	
	public static void main(String [] args){
	    System.out.println("Running the Grid Service Client");
		try{
		if(!(args.length < 2)){
			if(args[0].equals("-url")){
			  AIMTCGADataServiceClient client = new AIMTCGADataServiceClient(args[1]);
			  // place client calls here if you want to use this main as a
			  // test....
			  
			  File dir = new File("E:/Dev/src/TCGA/AdamAIMTCGAData-addedID");
			  File[] files = dir.listFiles(new FilenameFilter() {

				public boolean accept(File arg0, String arg1) {
					return arg1.endsWith(".xml");
				}
			  });
			  
			  for (File f : files) {
					byte[] buf = new byte[(int) f.length()];
					BufferedInputStream fis = new BufferedInputStream(new FileInputStream(f));
					fis.read(buf, 0, (int)f.length());

				  client.submit(new String[] {new String(buf)});
				  
			  }

			  
			  // client.submitBySoap("E:/Dev/src/aim/Sample_AIMAnnotations_TCGA_09302009/Sample_AIMAnnotations_TCGA_09302009/AIMAnnotations/Baseline/0022BaselineA.xml", client);
			  
			  // client.queryBySOAP("E:/Dev/src/ivi/trunk/services/AIMTCGADataService/test/resources/AIMTCGATestCQL.xml", client);
			  
			} else {
				usage();
				System.exit(1);
			}
		} else {
			usage();
			System.exit(1);
		}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

  public org.oasis.wsrf.properties.GetMultipleResourcePropertiesResponse getMultipleResourceProperties(org.oasis.wsrf.properties.GetMultipleResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getMultipleResourceProperties");
    return portType.getMultipleResourceProperties(params);
    }
  }

  public org.oasis.wsrf.properties.GetResourcePropertyResponse getResourceProperty(javax.xml.namespace.QName params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"getResourceProperty");
    return portType.getResourceProperty(params);
    }
  }

  public org.oasis.wsrf.properties.QueryResourcePropertiesResponse queryResourceProperties(org.oasis.wsrf.properties.QueryResourceProperties_Element params) throws RemoteException {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryResourceProperties");
    return portType.queryResourceProperties(params);
    }
  }

  public gov.nih.nci.cagrid.cqlresultset.CQLQueryResults query(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"query");
    gov.nih.nci.cagrid.data.QueryRequest params = new gov.nih.nci.cagrid.data.QueryRequest();
    gov.nih.nci.cagrid.data.QueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.QueryRequestCqlQuery();
    cqlQueryContainer.setCQLQuery(cqlQuery);
    params.setCqlQuery(cqlQueryContainer);
    gov.nih.nci.cagrid.data.QueryResponse boxedResult = portType.query(params);
    return boxedResult.getCQLQueryResultCollection();
    }
  }

  public gov.nih.nci.cagrid.enumeration.stubs.response.EnumerationResponseContainer enumerationQuery(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"enumerationQuery");
    gov.nih.nci.cagrid.data.enumeration.EnumerationQueryRequest params = new gov.nih.nci.cagrid.data.enumeration.EnumerationQueryRequest();
    gov.nih.nci.cagrid.data.enumeration.EnumerationQueryRequestCqlQuery cqlQueryContainer = new gov.nih.nci.cagrid.data.enumeration.EnumerationQueryRequestCqlQuery();
    cqlQueryContainer.setCQLQuery(cqlQuery);
    params.setCqlQuery(cqlQueryContainer);
    gov.nih.nci.cagrid.data.enumeration.EnumerationQueryResponse boxedResult = portType.enumerationQuery(params);
    return boxedResult.getEnumerationResponseContainer();
    }
  }

  public void submit(java.lang.String[] xmls) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"submit");
    edu.emory.cci.aim.stubs.SubmitRequest params = new edu.emory.cci.aim.stubs.SubmitRequest();
    params.setXmls(xmls);
    edu.emory.cci.aim.stubs.SubmitResponse boxedResult = portType.submit(params);
    }
  }

  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference queryByTransfer(gov.nih.nci.cagrid.cqlquery.CQLQuery cqlQuery) throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"queryByTransfer");
    edu.emory.cci.aim.stubs.QueryByTransferRequest params = new edu.emory.cci.aim.stubs.QueryByTransferRequest();
    edu.emory.cci.aim.stubs.QueryByTransferRequestCqlQuery cqlQueryContainer = new edu.emory.cci.aim.stubs.QueryByTransferRequestCqlQuery();
    cqlQueryContainer.setCQLQuery(cqlQuery);
    params.setCqlQuery(cqlQueryContainer);
    edu.emory.cci.aim.stubs.QueryByTransferResponse boxedResult = portType.queryByTransfer(params);
    return boxedResult.getTransferServiceContextReference();
    }
  }

  public org.cagrid.transfer.context.stubs.types.TransferServiceContextReference submitByTransfer() throws RemoteException, gov.nih.nci.cagrid.data.faults.QueryProcessingExceptionType, gov.nih.nci.cagrid.data.faults.MalformedQueryExceptionType {
    synchronized(portTypeMutex){
      configureStubSecurity((Stub)portType,"submitByTransfer");
    edu.emory.cci.aim.stubs.SubmitByTransferRequest params = new edu.emory.cci.aim.stubs.SubmitByTransferRequest();
    edu.emory.cci.aim.stubs.SubmitByTransferResponse boxedResult = portType.submitByTransfer(params);
    return boxedResult.getTransferServiceContextReference();
    }
  }

}
